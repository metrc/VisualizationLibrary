---
name: Build Pre-Release Packages for Linux and MacOS (dev)
run-name: Building Pre-Release Packages for Linux and MacOS (dev)
on:
  push:
    branches: dev
    paths-ignore: 
      - '**.md'
      - '.gitignore'
jobs:
  build-linux-prerelease:
    name: Build Linux Pre-release
    runs-on: ubuntu-latest
    outputs:
      upload_url: ${{ steps.create_release.outputs.upload_url }}
      tag_name:  ${{ steps.create_tag_name.outputs.tag_name }}
    steps:
    # Checkout repository and install R and R package dependencies
    - name: Checkout git repository on to Github Actions runner
      uses: actions/checkout@v3
    - name: Installs R using tidyverse r-lib Actions
      uses: r-lib/actions/setup-r@v2
    - name: Install R package dependencies using tidyverse r-lib Actions
      uses: r-lib/actions/setup-r-dependencies@v2
      with:
        extra-packages: any::rcmdcheck
        needs: check

    # Run R CMD Check. If this check fails we abort subsequent steps.
    - name: Runs R CMD Check
      id: r-cmd-check
      uses: r-lib/actions/check-r-package@v2
      with:
        error-on: '"error"'

    # Build Linux binary package
    - name: Build platform-specific binary packages
      run: R CMD INSTALL -l ${{ runner.temp }} --build .

    # Retrieve build artifact filenames
    - name: Retrieve package version from DESCRIPTION file and set as env variable
      run: |
        echo "package_version=$(grep -oP '(?<=Version: )\d+\.\d+\.\d+' DESCRIPTION)" >> $GITHUB_ENV
        echo $(grep -oP '(?<=Version: )\d+\.\d+\.\d+' DESCRIPTION)
    - name: Retrieve binary package filename and set as env variable
      run: | 
        echo "linux_binary_pkg_filename=$(ls VisualizationLibrary_${{ env.package_version }}_R_*.tar.gz)" >> $GITHUB_ENV
        echo $(ls VisualizationLibrary_${{ env.package_version }}_R_*.tar.gz)
    - name: Retrieve binary package filename and set as env variable
      run: | 
        echo "linux_source_pkg_filename=$(ls VisualizationLibrary_${{ env.package_version }}.tar.gz)" >> $GITHUB_ENV
        echo $(ls VisualizationLibrary_${{ env.package_version }}.tar.gz)

    # Generate Release Metadata
    - name: Create autogenerated release tag name
      id: create_tag_name
      run: | 
        # Tag names follow SemVer 2.0.0 convention:
        # <major>.<minor>.<patch>-<pre-release>-build-<build>
        
        if [[ ${{ github.ref_name }} != "main" ]]; then
          # If the branch name is not main, we set a pre-release field in the SemVer
          echo "tag_name=${{ env.package_version }}-${{ github.ref_name }}-build-${{ github.run_number }}" >> "$GITHUB_ENV"
          echo "tag_name=${{ env.package_version }}-${{ github.ref_name }}-build-${{ github.run_number }}" >> "$GITHUB_OUTPUT"
        else
          # Otherwise for main releases on "main", we omit the pre-release field.
          echo "tag_name=${{ env.package_version }}-build-${{ github.run_number }}" >> "$GITHUB_ENV"
          echo "tag_name=${{ env.package_version }}-build-${{ github.run_number }}" >> "$GITHUB_OUTPUT"
        fi
        echo ${{ env.tag_name }}

    # Create Release
    - name: Create Release
      if: ${{ github.ref_name }} == "dev"
      id: create_release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ env.tag_name }}
        release_name: pre-release build for branch (${{ github.ref_name }}) on tag ${{ env.tag_name }}.
        body: |
          Automatic pre-release build for ${{ github.ref_name }} branch on tag ${{ env.tag_name }}.
        draft: false
        prerelease: true
    
    # Upload release artifacts to the newly-created release
    - name: Upload Linux Binary Package
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: ./${{ env.linux_binary_pkg_filename }}
        asset_name: Linux-binary-${{ env.linux_binary_pkg_filename }}
        asset_content_type: application/gzip

  # Note that the Mac OS runner depends upon the Linux runner. It will not execute
  # if the Linux build does not work. This saves on unnecessary compute costs.
  build-macos-prerelease:
    name: Build MacOS Pre-release
    runs-on: macos-latest
    needs: build-linux-prerelease
    steps:
      # Initial Preparations
    - name: Checkout git repository on to Github Actions runner
      uses: actions/checkout@v3
    - name: Installs R using tidyverse r-lib Actions
      uses: r-lib/actions/setup-r@v2
    - name: Install R package dependencies using tidyverse r-lib Actions
      uses: r-lib/actions/setup-r-dependencies@v2

    # Build MacOS binary package
    - name: Build platform-specific binary packages
      run: R CMD INSTALL -l ${{ runner.temp }} --build .

    # Retrieve build artifact filenames
    - name: Retrieve package version from DESCRIPTION file and set as env variable
      run: |
        # Note that because Mac OS supplies BSD grep, we must use Perl instead
        package_version=`perl -nle'print $& while m{(?<=Version: )\d+\.\d+\.\d+}g' DESCRIPTION`
        echo "package_version=$package_version" >> $GITHUB_ENV
    - name: Retrieve binary package filename and set as env variable
      run: | 
        echo $(ls .)
        ls -alh
        echo "macos_binary_pkg_filename=VisualizationLibrary_${{ env.package_version }}.tgz" >> $GITHUB_ENV

    # Upload release artifacts.
    - name: Upload MacOS Binary Package
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ needs.build-linux-prerelease.outputs.upload_url }}
        asset_path: ./${{ env.macos_binary_pkg_filename }}
        asset_name: MacOS-binary-${{ env.macos_binary_pkg_filename }}
        asset_content_type: application/gzip

  # build-windows:
  #   name: Windows Build
  #   runs-on: windows-latest
  #   steps:
  #   - name: Checkout git repository on to Github Actions runner
  #     uses: actions/checkout@v3
  #   - name: Installs R using tidyverse r-lib Actions
  #     uses: r-lib/actions/setup-r@v2
  #   - name: Install R package dependencies using tidyverse r-lib Actions
  #     uses: r-lib/actions/setup-r-dependencies@v2
  #   - name: Build platform-specific source packages
  #     run: R CMD build
  #   - name: Build platform-specific binary packages
  #     run: R CMD INSTALL -l ${{ runner.temp }} --build ${{ github.workspace }}